// Note: when this script is run by Travis on a modern OS, the current
// directory is not available. If you use getAbsolutePath(), what you
// get back is something like this: /home/travis/build/[secure]/
// and that's not useful. Consequently, all of the paths in this project
// have been made relative.
//
// Note also: relative paths are tricky because options to XSL stylesheets
// and pipelines will be resolved *relative to the stylesheet or pipeline*.
//
// You have been warned.

buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://maven.restlet.talend.com" }
  }

  dependencies {
    classpath group: 'com.xmlcalabash', name: 'xmlcalabash1-gradle', version: '1.3.6'
    classpath group: 'com.xmlcalabash', name: 'xmlcalabash', version: '1.1.30-98'
    classpath group: 'org.xmlresolver', name: 'xmlresolver', version: '1.0.6'
    classpath group: 'xerces', name: 'xerces', version: '2.2.1'
  }
}

plugins {
  id "de.undercouch.download" version "3.4.3"
}

repositories {
  mavenLocal()
  mavenCentral()
}

configurations {
  tools {
    description = "Run tools"
    transitive = true
  }
}

dependencies {
  tools (
    fileTree(dir: 'tools/lib').include("*.jar")
  )
}

ext {
  containers = [:]
  c_xproctest = "xproctests"
}

defaultTasks 'website'

apply plugin: 'com.xmlcalabash.task'
apply plugin: 'groovy'

import de.undercouch.gradle.tasks.download.Download
import com.xmlcalabash.XMLCalabashTask

// ======================================================================

def getenv(String name) {
  if (System.getenv(name) == null) {
    return ""
  } else {
    return System.getenv(name)
  }
}

def docker_stdout = new ByteArrayOutputStream()
exec {
  commandLine "docker", "ps", "-a", "--format={{.ID}} {{.Names}} {{.Status}}"
  standardOutput = docker_stdout;
}

docker_stdout.toString().split("\n").each { line ->
  def parts = line.split(" ")
  if (parts.length > 2) {
    def id = parts[0]
    def name = parts[1]
    def status = parts[2]

    if (name.contains(":")) {
      name = name.split(":")[0];
    }

    if (!status.startsWith("Exited")) {
      containers[name] = id
    }
  }
}

task dockerup() {
  doLast {
    if (!containers.containsKey(c_xproctest)) {
      throw new GradleException("Docker containers are not available")
    }
  }
}

task dockerdown() {
  doLast {
    if (containers.containsKey(c_xproctest)) {
        throw new GradleException("Docker containers already running?")
    }
  }
}

task start(type: Exec, dependsOn: ["do_start"]) {
  commandLine "docker", "ps", "-a", "--format={{.ID}} {{.Names}} {{.Status}}"
}

task do_start(type: Exec) {
  workingDir "docker"
  commandLine "docker-compose", "up", "-d"
}

task stop(type: Exec) {
  workingDir "docker"
  commandLine "docker-compose", "down"
}

// ======================================================================

// Make sure this happens during the configure phase or the
// call to git-log-summary will fail.
mkdir("build")

// ======================================================================
// schemas

task schemas(dependsOn: ["test_suite_rng", "test_suite_sch", "junit_xsd"]) {
  // nop
}

task test_suite_rng(type: JavaExec) {
  inputs.file "src/main/schema/test-suite.rnc"
  outputs.file "build/test-suite.rng"

  classpath = configurations.tools
  main = 'com.thaiopensource.relaxng.translate.Driver'
  args = ["src/main/schema/test-suite.rnc", "build/test-suite.rng"]
  doFirst {
    mkdir("build")
  }
}

task test_suite_sch(type: Copy) {
  from "src/main/schema/"
  into "build/"
  include "*.sch"
  doFirst {
    mkdir("build")
  }
}

task junit_xsd(type: Copy) {
  from "src/main/schema/"
  into "build/"
  include "*.xsd"
  doFirst {
    mkdir("build")
  }
}

// ======================================================================

task test_index_setup(dependsOn: ["process_all_tests","git_log_shorter","get_specs"],
                      type: XMLCalabashTask) {
  inputs.file "reports/xml-calabash.xml"
  inputs.file "build/git-log-shorter.xml"
  inputs.file "tools/xsl/test-index.xsl"
  inputs.file "tools/xsl/functions.xsl"
  inputs.file "tools/xsl/merge-git-log.xsl"
  output("result", "build/indexing.xml")
  extensionValues true
  ignoreInvalidXmlBase true
  option("spec-dir", "build/specs")
  pipeline "tools/xpl/test-index-setup.xpl"
  doFirst {
    mkdir("build/html")
  }
}

task test_indexes(dependsOn: ["test_index_setup"]) {
  // nop
}

["alphabetical", "date", "element", "errors", "expected",
 "implementation"].each { itype ->
  def taskname = "test_" + itype + "_index"

  task "idx_$taskname"(dependsOn: ["test_index_setup"], type: XMLCalabashTask) {
    input("source", "build/indexing.xml")
    output("result", "build/html/" + itype + ".html")
    param("index-type", itype)
    extensionValues true
    option("stylesheet", "../xsl/test-index.xsl")
    pipeline "tools/xpl/run-xslt-html.xpl"
  }
  test_indexes.dependsOn "idx_$taskname"
}

def test_sources = []
def xformed_tests = []

fileTree(dir: 'test-suite/tests').include("**/*.xml").each { file ->
  def fn = file.toString()
  def pos = fn.indexOf("/test-suite/tests/")
  def base = fn.substring(pos+12)
  def html = base.substring(6).replace(".xml", ".html")

  test_sources << "test-suite/" + base
  xformed_tests << "build/html/tests/" + html
}

task process_all_tests(dependsOn: [ "schemas", "get_specs" ], type: XMLCalabashTask) {
  inputs.files test_sources
  outputs.files xformed_tests
  pipeline "tools/xpl/process-all.xpl"
  doFirst {
    mkdir("build/tests")
  }
}

// ======================================================================

task git_log_summary(type: Exec) {
  outputs.file "build/git-log-summary.xml"
  commandLine 'tools/bin/git-log-summary', '-o', 'build/git-log-summary.xml'
}

task git_log_shorter(dependsOn: ["git_log_summary"], type: XMLCalabashTask) {
  inputs.file "tools/xsl/shorter-log.xsl"
  inputs.file "build/git-log-summary.xml"
  outputs.file "build/git-log-shorter.xml"
  input("source", "build/git-log-summary.xml")
  output("result", "build/git-log-shorter.xml")
  pipeline "tools/xpl/run-xslt.xpl"
  option("stylesheet", "../xsl/shorter-log.xsl")
  doFirst {
    mkdir("build")
  }
}

// ======================================================================

task website(dependsOn: [ "process_all_tests", "test_indexes", "copy_tests", "make_index" ]) {
  doFirst {
    mkdir("build")
  }
}

task copy_tests(type: Copy) {
  from "test-suite/"
  into "build/html/test-suite/"
}

task copy_rsrcs(type: Copy) {
  from "src/main/resources"
  exclude "index.html"
  into "build/html/"
}

task make_index(dependsOn: ["copy_rsrcs","get_specs"], type: XMLCalabashTask) {
  inputs.file "tools/xsl/travis-patch.xsl"
  inputs.file "tools/xpl/run-xslt-html.xpl"
  input("source", "src/main/resources/index.html")
  output("result", "build/html/index.html")
  pipeline "tools/xpl/run-xslt-html.xpl"
  option("stylesheet", "../xsl/travis-patch.xsl")
  param("travis", getenv('TRAVIS'))
  param("travis-build", getenv('TRAVIS_BUILD_NUMBER'))
  param("travis-commit", getenv('TRAVIS_COMMIT'))
  doFirst {
    mkdir("build/html")
  }
}

task get_specs(type: XMLCalabashTask) {
  output("result", "build/specs.xml")
  pipeline "tools/xpl/specs.xpl"
  option("spec-dir", "../../build/specs")
}

["xproc", "steps", "file", "json", "os", "paged-media", "run", "text", "validation"].each { name ->
  File target = new File("build/specs/" + name + ".html")
  Task t = task "download_$name"(type: Download) {
    src "https://spec.xproc.org/master/head/" + name + "/"
    dest target
    doFirst {
      mkdir("build/specs")
    }
  }
  t.onlyIf { !target.exists() }
  get_specs.dependsOn "download_$name"
}

task list_test(type: XMLCalabashTask, dependsOn: [ "get_specs" ]) {
  inputs.file "tools/xsl/list-test.xsl"
  option("spec-dir", "../../build/specs")
  pipeline "tools/xpl/list-test.xpl"
  output("result", "build/out.html")
  extensionValues true
  doFirst {
    mkdir("build")
  }
}

// ======================================================================
// Clean up

clean {
  doFirst {
    delete("build")
  }
}

