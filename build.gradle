buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    maven { url "http://maven.restlet.org" }
  }

  dependencies {
    classpath group: 'com.xmlcalabash', name: 'xmlcalabash1-gradle', version: '1.3.5'
    classpath group: 'com.xmlcalabash', name: 'xmlcalabash', version: '1.1.22-98'
    classpath group: 'org.xmlresolver', name: 'xmlresolver', version: '0.13.2'
  }
}

repositories {
  mavenLocal()
  mavenCentral()
}

configurations {
  tools {
    description = "Run tools"
    transitive = true
  }
}

dependencies {
  tools (
    fileTree(dir: 'tools/lib').include("*.jar")
  )
}

defaultTasks 'validate_all_tests'

apply plugin: 'com.xmlcalabash.task'
apply plugin: 'groovy'

import com.xmlcalabash.XMLCalabashTask

// ======================================================================

def getenv(String name) {
  if (System.getenv(name) == null) {
    return ""
  } else {
    return System.getenv(name)
  }
}

// ======================================================================
// schemas

task schemas(dependsOn: ["test_suite_rng", "test_suite_sch"]) {
  // nop
}

task test_suite_rng(type: JavaExec) {
  inputs.file "schema/test-suite.rnc"
  outputs.file "build/test-suite.rng"

  classpath = configurations.tools
  main = 'com.thaiopensource.relaxng.translate.Driver'
  args = ["schema/test-suite.rnc", "build/test-suite.rng"]
  doFirst {
    mkdir("build")
  }
}

task test_suite_sch(type: Copy) {
  from "schema/"
  into "build/"
  include "*.sch"
  doFirst {
    mkdir("build")
  }
}

// ======================================================================

task validate_all_tests() {
  doLast {
    println("All tests valid")
  }
}

fileTree(dir: 'test-suite/tests').include("**/*.xml").each { file ->
  def fn = file.getAbsolutePath()
  def pos = fn.indexOf("/test-suite/tests/")
  def base = fn.substring(pos+12)
  def name = base.replace("/","_")

  task "process_$name"(dependsOn: [ "schemas" ], type: XMLCalabashTask) {
    inputs.file "test-suite/" + base
    outputs.file "build/" + base
    input("source", "test-suite/" + base)
    output("result", "build/" + base)
    pipeline "tools/xpl/validate.xpl"
    doFirst {
      mkdir("build/tests")
    }
  }
  validate_all_tests.dependsOn "process_$name"
}

task validate(dependsOn: [ "schemas" ], type: XMLCalabashTask) {
  inputs.files fileTree(dir: "test-suite")
  outputs.file "build/tests/p-inline-007.xml"
  input("source", "test-suite/tests/p-inline-007.xml")
  output("result", "build/tests/p-inline-007.xml")
  pipeline "tools/xpl/validate.xpl"
  doFirst {
    mkdir("build/tests")
  }
}
